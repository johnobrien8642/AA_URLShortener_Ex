#!/usr/bin/env ruby

class CLI
  def create_url  
    if @current_user.premium
      puts "Hello premium user, would you like to create a custom URL?"
      puts "0. Yes"
      puts "1. No"
      option = Integer(gets.chomp)

      case option
      when 0
      puts 'Would you like us to pick random words, or would you like to write it?'
      puts '0. I would like you to pick random words.'
      puts '1. I would like to write it.'
      option2 = Integer(gets.chomp)
        case option2
        when 0
        puts 'Type in your long url'
          long_url = gets.chomp
          cust_url = ShortenedUrl.random_words
          shortened_url = ShortenedUrl.create_cust_url_for_user_from_long_url!(
            @current_user,
            long_url,
            cust_url
          )
        when 1
        puts 'Type in your long url'
          long_url = gets.chomp
        puts 'Type in your custom url'
          cust_url = gets.chomp
          shortened_url = ShortenedUrl.create_cust_url_for_user_from_long_url!(
            @current_user,
            long_url,
            cust_url
          )
        end
      when 1
      puts 'Type in your long url'
        long_url = gets.chomp
        shortened_url = ShortenedUrl.create_for_user_and_long_url!(
        @current_user,
        long_url
        )
      end
    else
      puts 'Type in your long url'
        long_url = gets.chomp
        shortened_url = ShortenedUrl.create_for_user_and_long_url!(
        @current_user,
        long_url
        )
    end

    puts "Short url is: #{shortened_url.short_url}"
  end

  def login_user!
    puts 'Input your email:'
    @current_user = User.find_by(email: gets.chomp)

    raise 'That user doesn\'t exist' if @current_user.nil?
    nil
  end

  def run
    login_user!

    puts 'What do you want to do?'
    puts '0. Create shortened URL'
    puts '1. Visit shortened URL'
    option = Integer(gets.chomp)

    case option
    when 0
        create_url
    when 1
        visit_url
    end
  end

  def visit_url
    puts 'Type in the shortened URL'
    short_url = gets.chomp

    shortened_url = ShortenedUrl.find_by(short_url: short_url)

    raise 'no such url found!' if shortened_url.nil?

    Visit.record_visit!(@current_user, shortened_url)
    Launchy.open(shortened_url.long_url)
  end
end

CLI.new.run

